apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pihole-etc
  namespace: pihole
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pihole-dnsmasq
  namespace: pihole
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: fast

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pihole
  namespace: pihole
  labels:
    app:  pihole
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app:  pihole
  template:
    metadata:
      labels:
        app: pihole
    spec:
      containers:
        - name:  pihole-cloudflared
          image: crazymax/cloudflared:2020.7.1
          resources:
            requests:
              memory: "64Mi"
            limits:
              memory: "128Mi"
          env:
            - name: TZ
              value: America/Chicago
            - name: TUNNEL_DNS_UPSTREAM
              value: "https://1.0.0.1/dns-query,https://1.1.1.1/dns-query"
        - name: pihole-core
          image: pihole/pihole:v5.1.1
          resources:
            requests:
              memory: "128Mi"
            limits:
              memory: "512Mi"
          env:
            - name: TZ
              value: America/Chicago
            - name: DNS1
              value: 127.0.0.1#5053
            - name: DNS2
              value: 127.0.0.1#5053
          ports:
            - containerPort: 80
              name: web
              protocol: TCP
            - containerPort: 53
              name: dns-udp
              protocol: UDP
            - containerPort: 53
              name: dns-tcp
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/dnsmasq.d
              name: pihole-dnsmasq
            - mountPath: /etc/pihole
              name: pihole-etc
            - mountPath: /etc/pihole/adlists.list
              name: pihole-adlists
              subPath: adlists.list
            - mountPath: /etc/pihole/regex.list
              name: pihole-regex
              subPath: regex.list
      volumes:
        - name: pihole-dnsmasq
          persistentVolumeClaim:
            claimName: pihole-dnsmasq
        - name: pihole-etc
          persistentVolumeClaim:
            claimName: pihole-etc
        - configMap:
            name: pihole-adlists
          name: pihole-adlists
        - configMap:
            name: pihole-regex
          name: pihole-regex

---

kind: Service
apiVersion: v1
metadata:
  name: pihole-web
  namespace: pihole
spec:
  selector:
    app: pihole
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      name: web
  type: ClusterIP

---

kind: Service
apiVersion: v1
metadata:
  name: pihole-dns-tcp
  namespace: pihole
  annotations:
    metallb.universe.tf/allow-shared-ip: "pihole-dns"
spec:
  externalTrafficPolicy: Local
  selector:
    app: pihole
  ports:
    - protocol: TCP
      port: 53
      targetPort: 53
      name: dns-tcp
  type: LoadBalancer

---

kind: Service
apiVersion: v1
metadata:
  name: pihole-dns-udp
  namespace: pihole
  annotations:
    metallb.universe.tf/allow-shared-ip: "pihole-dns"
spec:
  externalTrafficPolicy: Local
  selector:
    app: pihole
  ports:
    - protocol: UDP
      port: 53
      targetPort: 53
      name: dns-udp
  type: LoadBalancer

---

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: pihole
  namespace: pihole
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: "letsencrypt"
spec:
  rules:
    - host: pihole.ttys0.net
      http:
        paths:
          - path: /
            backend:
              serviceName: pihole-web
              servicePort: 80
  tls:
    - hosts:
        - pihole.ttys0.net
      secretName: pihole-net-tls
