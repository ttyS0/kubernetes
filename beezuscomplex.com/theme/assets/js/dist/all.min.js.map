{"version":3,"sources":["main.js","plugins.js"],"names":["sidebarHeight","innerHeight","jQuery","height","footerHeight","windowHeight","window","switchClass","addClass","removeClass","$","process","check_lock","index","selectorsLength","selectors","length","$appeared","filter","this","is","trigger","$prior_appeared","$disappeared","not","add_selector","selector","push","check_binded","defaults","interval","force_process","$window","expr","element","$element","window_left","scrollLeft","window_top","scrollTop","offset","left","top","data","width","fn","extend","appear","options","opts","on_check","setTimeout","scroll","resize","force_appear","module","require","fitVids","settings","customSelector","document","getElementById","head","getElementsByTagName","css","div","createElement","innerHTML","appendChild","childNodes","each","$allVideos","find","join","$this","tagName","toLowerCase","parent","attr","isNaN","parseInt","aspectRatio","videoID","Math","floor","random","wrap","removeAttr","Zepto","lunr","config","builder","Builder","pipeline","add","trimmer","stopWordFilter","stemmer","searchPipeline","call","build","version","utils","warn","global","message","console","asString","obj","toString","FieldRef","docRef","fieldName","stringValue","_stringValue","joiner","fromString","s","n","indexOf","fieldRef","slice","prototype","undefined","idf","posting","documentCount","documentsWithTerm","Object","keys","x","log","abs","Token","str","metadata","update","clone","tokenizer","Array","isArray","map","t","trim","len","tokens","sliceEnd","sliceStart","char","charAt","sliceLength","match","separator","position","Pipeline","_stack","registeredFunctions","create","registerFunction","label","warnIfFunctionNotRegistered","isRegistered","load","serialised","forEach","fnName","Error","fns","arguments","after","existingFn","newFn","pos","splice","before","remove","run","stackLength","i","reduce","memo","token","j","result","concat","runString","reset","toJSON","Vector","elements","_magnitude","positionForIndex","start","end","pivotPoint","pivotIndex","insert","insertIdx","val","upsert","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","dotProduct","a","b","aLen","bLen","aVal","bVal","similarity","toArray","output","step2list","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","step3list","icate","ative","alize","iciti","ical","ful","ness","c","v","C","V","mgr0","meq1","mgr1","s_v","re_mgr0","RegExp","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","porterStemmer","w","stem","suffix","firstch","re","re2","re3","re4","substr","toUpperCase","test","replace","fp","exec","generateStopWordFilter","stopWords","words","stopWord","TokenSet","edges","id","_nextId","fromArray","arr","finish","root","fromClause","clause","fromFuzzyString","term","editDistance","stack","node","editsRemaining","frame","pop","noEditNode","deletionNode","substitutionNode","insertionNode","transposeNode","charA","charB","wildcardFound","final","next","prefix","edge","_str","labels","sort","intersect","qNode","qEdges","qLen","nEdges","nLen","q","qEdge","nEdge","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","downTo","childKey","Index","attrs","invertedIndex","fieldVectors","tokenSet","fields","search","queryString","query","parser","QueryParser","parse","Query","matchingFields","queryVectors","termFieldCache","clauses","terms","usePipeline","m","termTokenSet","expandedTerms","expandedTerm","termIndex","_index","k","field","fieldPosting","matchingDocumentRefs","termField","boost","l","fieldMatch","matchingDocumentRef","matchingFieldRef","MatchData","matchingFieldRefs","results","matches","docMatch","fieldVector","score","matchData","combine","ref","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","fieldTermFrequencies","fieldLengths","_b","_k1","metadataWhitelist","number","k1","doc","fieldTerms","metadataKey","calculateAverageFieldLengths","fieldRefs","numberOfFields","accumulator","documentsWithField","averageFieldLength","createFieldVectors","fieldRefsLength","termIdfCache","fieldLength","termFrequencies","termsLength","scoreWithPrecision","tf","round","createTokenSet","use","args","unshift","apply","clonedMetadata","metadataKeys","key","otherMatchData","allFields","wildcard","String","NONE","LEADING","TRAILING","QueryParseError","name","QueryLexer","lexemes","escapeCharPositions","state","lexText","sliceString","subSlices","emit","type","escapeCharacter","EOS","ignore","backup","acceptDigitRun","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","termSeparator","currentClause","lexemeIdx","parseFieldOrTerm","peekLexeme","consumeLexeme","lexeme","nextClause","completedClause","parseField","parseTerm","errorMessage","possibleFields","f","nextLexeme","parseEditDistance","parseBoost","factory","define","amd","exports","ghostHunter","pluginMethods","init","resultsData","onPageLoad","onKeyUp","result_template","info_template","displaySearchInfo","zeroResultsInfo","onComplete","includepages","filterfields","subpath","item_preprocessor","indexing_start","indexing_end","prettyDate","date","d","Date","monthNames","getDate","getMonth","getFullYear","getSubpathKey","grabAndIndex","blogData","latestPost","params","limit","include","formats","me","get","ghost","url","api","done","idxSrc","posts","arrayItem","itemDate","updated_at","getTime","recordedDate","tag_arr","tags","meta_description","category","parsedData","title","description","plaintext","pubDate","published_at","tag","localUrl","link","assign","subpathKey","localStorage","setItem","JSON","stringify","e","isInit","target","miam","that","loadAPI","focus","closest","submit","preventDefault","keyup","getItem","value","searchResult","empty","append","format","amount","lunrref","postData","clear","r","$document","ready","$postContent","$grid","imagesLoaded","masonry","itemSelector","percentPosition","transitionDuration","on","event","$all_appeared_elements","fadeOut","toggleClass"],"mappings":"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AAAC,EAAAiH,GAEA,MADAjH,GAAAiH,GAAAA,EACAjH,MAGA,OAAA,UAAAC,GACA,GAAAA,GAAA+G,EAAA/G,EAAAxE,cAAAwE,EAAAxE,WAAA,MAAAwE,KAgBA5F,EAAAO,eAAAP,EAAAyM,wBACA,IACA,OACA,QACA,SACA,QACA,MACA,SACA,OACA,KACA,QACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,UACA,OACA,MACA,KACA,MACA,SACA,QACA,OACA,MACA,KACA,OACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,KACA,MACA,OACA,MACA,MACA,MACA,UACA,IACA,KACA,KACA,OACA,KACA,KACA,MACA,OACA,QACA,MACA,OACA,SACA,MACA,KACA,QACA,OACA,OACA,KACA,UACA,KACA,MACA,MACA,KACA,MACA,QACA,KACA,OACA,KACA,QACA,MACA,MACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,KACA,OACA,OACA,OACA,MACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,MACA,KACA,MACA,OACA,KACA,QACA,MACA,KACA,OACA,OACA,OACA,QACA,QACA,QACA,MACA,OACA,MACA,OACA,OACA,QACA,MACA,MACA,SAGAzM,EAAAiE,SAAAI,iBAAArE,EAAAO,eAAA,kBAqBAP,EAAAM,QAAA,SAAAsF,GACA,MAAAA,GAAA7C,OAAA,SAAAnB,GACA,MAAAA,GAAA0K,QAAA,OAAA,IAAAA,QAAA,OAAA,OAIAtM,EAAAiE,SAAAI,iBAAArE,EAAAM,QAAA,WA2BAN,EAAA6M,SAAA,WACAnR,KAAAA,UAAA,EACAA,KAAAoR,SACApR,KAAAqR,GAAA/M,EAAA6M,SAAAG,QACAhN,EAAA6M,SAAAG,SAAA,GAWAhN,EAAA6M,SAAAG,QAAA,EASAhN,EAAA6M,SAAAI,UAAA,SAAAC,GAGA,IAAA,GAFAhN,GAAA,GAAAF,GAAA6M,SAAA1M,QAEAsF,EAAA,EAAAlC,EAAA2J,EAAA3R,OAAAkK,EAAAlC,EAAAkC,IACAvF,EAAAyG,OAAAuG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","file":"all.min.js","sourcesContent":["/**\n * Main JS file for Paperleaf behaviours\n */\n\n/* globals jQuery, document */\n(function ($, undefined) {\n  \"use strict\";\n\n  var $document = $(document);\n\n  $document.ready(function () {\n\n    /**\n     * FitVids.js for responsive videos\n     */\n    var $postContent = $(\".post-content\");\n    $postContent.fitVids();\n\n    /**\n     * Masonry grid\n     */\n    var $grid = $('.js-grid').imagesLoaded( function() {\n      $grid.masonry({\n        itemSelector       : '.post',\n        percentPosition    : true,\n        transitionDuration : '0.25s'\n      });\n      $.force_appear();\n    });\n\n    /**\n     * Add class to elements that appear in viewport\n     */\n    $('.post--grid').appear();\n    $('.post--grid').on('appear', function(event, $all_appeared_elements) {\n      $(this).addClass('animate');\n    });\n\n    /**\n     * Preloader\n     */\n    $('body').imagesLoaded( function() {\n      $('.js-loader').fadeOut(250);\n    });\n\n    /**\n     * GhostHunter search\n     */\n    $('.search-field').ghostHunter({\n      results   : '.content-area',\n      includepages : true,\n      info_template   : '<h1 class=\"page-title mt0\">Number of posts found: {{amount}}</h1>',\n      result_template: '<article class=\"animate border-box post--grid\"><div class=\"p3 bg-white box-shadow\"><header class=\"post-header\"><h2 class=\"post-title mt0 mb0 break-word\"><a class=\"black\" href=\"{{link}}\">{{title}}</a></h2></header></div></article>'\n    });\n\n    /**\n     * Handle sidebar height for phones and tablets\n     */\n    $(window).on('resize', function(event) {\n      sidebarHeight();\n    });\n    sidebarHeight();\n\n    $('.js-toggle-nav').on('click', function(event) {\n      event.preventDefault();\n      $(this).toggleClass('open');\n      $('.js-nav').toggleClass('is-visible');\n    });\n\n  });\n\n})(jQuery);\n\nfunction sidebarHeight() {\n  var innerHeight = jQuery('.js-sidebar-inner').height();\n  var footerHeight = jQuery('.js-sidebar-footer').height();\n  var windowHeight = jQuery(window).height();\n  var switchClass = ( innerHeight + footerHeight + 192 ) > windowHeight ? true : false;\n  if ( switchClass ) {\n    jQuery('.js-sidebar-footer').addClass('sidebar-footer-static');\n  } else {\n    jQuery('.js-sidebar-footer').removeClass('sidebar-footer-static');\n  }\n}\n","/*\n * jQuery appear plugin\n *\n * Copyright (c) 2012 Andrey Sidorov\n * licensed under MIT license.\n *\n * https://github.com/morr/jquery.appear/\n *\n * Version: 0.3.6\n */\n(function($) {\n  var selectors = [];\n\n  var check_binded = false;\n  var check_lock = false;\n  var defaults = {\n    interval: 250,\n    force_process: false\n  };\n  var $window = $(window);\n\n  var $prior_appeared = [];\n\n  function process() {\n    check_lock = false;\n    for (var index = 0, selectorsLength = selectors.length; index < selectorsLength; index++) {\n      var $appeared = $(selectors[index]).filter(function() {\n        return $(this).is(':appeared');\n      });\n\n      $appeared.trigger('appear', [$appeared]);\n\n      if ($prior_appeared[index]) {\n        var $disappeared = $prior_appeared[index].not($appeared);\n        $disappeared.trigger('disappear', [$disappeared]);\n      }\n      $prior_appeared[index] = $appeared;\n    }\n  };\n\n  function add_selector(selector) {\n    selectors.push(selector);\n    $prior_appeared.push();\n  }\n\n  // \"appeared\" custom filter\n  $.expr[':']['appeared'] = function(element) {\n    var $element = $(element);\n    if (!$element.is(':visible')) {\n      return false;\n    }\n\n    var window_left = $window.scrollLeft();\n    var window_top = $window.scrollTop();\n    var offset = $element.offset();\n    var left = offset.left;\n    var top = offset.top;\n\n    if (top + $element.height() >= window_top &&\n        top - ($element.data('appear-top-offset') || 0) <= window_top + $window.height() &&\n        left + $element.width() >= window_left &&\n        left - ($element.data('appear-left-offset') || 0) <= window_left + $window.width()) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  $.fn.extend({\n    // watching for element's appearance in browser viewport\n    appear: function(options) {\n      var opts = $.extend({}, defaults, options || {});\n      var selector = this.selector || this;\n      if (!check_binded) {\n        var on_check = function() {\n          if (check_lock) {\n            return;\n          }\n          check_lock = true;\n\n          setTimeout(process, opts.interval);\n        };\n\n        $(window).scroll(on_check).resize(on_check);\n        check_binded = true;\n      }\n\n      if (opts.force_process) {\n        setTimeout(process, opts.interval);\n      }\n      add_selector(selector);\n      return $(selector);\n    }\n  });\n\n  $.extend({\n    // force elements's appearance check\n    force_appear: function() {\n      if (check_binded) {\n        process();\n        return true;\n      }\n      return false;\n    }\n  });\n})(function() {\n  if (typeof module !== 'undefined') {\n    // Node\n    return require('jquery');\n  } else {\n    return jQuery;\n  }\n}());\n\n/*global jQuery */\n/*jshint browser:true */\n/*!\n* FitVids 1.1\n*\n* Copyright 2013, Chris Coyier - http://css-tricks.com + Dave Rupert - http://daverupert.com\n* Credit to Thierry Koblentz - http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/\n* Released under the WTFPL license - http://sam.zoy.org/wtfpl/\n*\n*/\n\n(function( $ ){\n\n  \"use strict\";\n\n  $.fn.fitVids = function( options ) {\n    var settings = {\n      customSelector: null\n    };\n\n    if(!document.getElementById('fit-vids-style')) {\n      // appendStyles: https://github.com/toddmotto/fluidvids/blob/master/dist/fluidvids.js\n      var head = document.head || document.getElementsByTagName('head')[0];\n      var css = '.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}';\n      var div = document.createElement('div');\n      div.innerHTML = '<p>x</p><style id=\"fit-vids-style\">' + css + '</style>';\n      head.appendChild(div.childNodes[1]);\n    }\n\n    if ( options ) {\n      $.extend( settings, options );\n    }\n\n    return this.each(function(){\n      var selectors = [\n        \"iframe[src*='player.vimeo.com']\",\n        \"iframe[src*='youtube.com']\",\n        \"iframe[src*='youtube-nocookie.com']\",\n        \"iframe[src*='kickstarter.com'][src*='video.html']\",\n        \"object\",\n        \"embed\"\n      ];\n\n      if (settings.customSelector) {\n        selectors.push(settings.customSelector);\n      }\n\n      var $allVideos = $(this).find(selectors.join(','));\n      $allVideos = $allVideos.not(\"object object\"); // SwfObj conflict patch\n\n      $allVideos.each(function(){\n        var $this = $(this);\n        if (this.tagName.toLowerCase() === 'embed' && $this.parent('object').length || $this.parent('.fluid-width-video-wrapper').length) { return; }\n        var height = ( this.tagName.toLowerCase() === 'object' || ($this.attr('height') && !isNaN(parseInt($this.attr('height'), 10))) ) ? parseInt($this.attr('height'), 10) : $this.height(),\n            width = !isNaN(parseInt($this.attr('width'), 10)) ? parseInt($this.attr('width'), 10) : $this.width(),\n            aspectRatio = height / width;\n        if(!$this.attr('id')){\n          var videoID = 'fitvid' + Math.floor(Math.random()*999999);\n          $this.attr('id', videoID);\n        }\n        $this.wrap('<div class=\"fluid-width-video-wrapper\"></div>').parent('.fluid-width-video-wrapper').css('padding-top', (aspectRatio * 100)+\"%\");\n        $this.removeAttr('height').removeAttr('width');\n      });\n    });\n  };\n// Works with either jQuery or Zepto\n})( window.jQuery || window.Zepto );\n\n/**\n* ghostHunter - 0.4.0\n * Copyright (C) 2014 Jamal Neufeld (jamal@i11u.me)\n * MIT Licensed\n * @license\n*/\n(function( $ ) {\n\n\t/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.1.5\n * Copyright (C) 2017 Oliver Nightingale\n * @license MIT\n */\n\n;(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.1.5\"\n/*!\n * lunr.utils\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf Utils\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf Utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\n  this.docRef = docRef\n  this.fieldName = fieldName\n  this._stringValue = stringValue\n}\n\nlunr.FieldRef.joiner = \"/\"\n\nlunr.FieldRef.fromString = function (s) {\n  var n = s.indexOf(lunr.FieldRef.joiner)\n\n  if (n === -1) {\n    throw \"malformed field ref string\"\n  }\n\n  var fieldRef = s.slice(0, n),\n      docRef = s.slice(n + 1)\n\n  return new lunr.FieldRef (docRef, fieldRef, s)\n}\n\nlunr.FieldRef.prototype.toString = function () {\n  if (this._stringValue == undefined) {\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\n  }\n\n  return this._stringValue\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n\n  return Math.log(1 + Math.abs(x))\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @returns {lunr.Token[]}\n */\nlunr.tokenizer = function (obj) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(lunr.utils.asString(t).toLowerCase())\n    })\n  }\n\n  var str = obj.toString().trim().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        tokens.push(\n          new lunr.Token (str.slice(sliceStart, sliceEnd), {\n            position: [sliceStart, sliceLength],\n            index: tokens.length\n          })\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null. This token will not be passed to any downstream pipeline functions and will not be\n * added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n\n    tokens = tokens.reduce(function (memo, token, j) {\n      var result = fn(token, j, tokens)\n\n      if (result === void 0 || result === '') return memo\n\n      return memo.concat(result)\n    }, [])\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str) {\n  var token = new lunr.Token (str)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n\n/**\n * Calculates the position within the vector to insert a given index.\n *\n * This is used internally by insert and upsert. If there are duplicate indexes then\n * the position is returned as if the value for that index were to be updated, but it\n * is the callers responsibility to check whether there is a duplicate at that index\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @returns {Number}\n */\nlunr.Vector.prototype.positionForIndex = function (index) {\n  // For an empty vector the tuple can be inserted at the beginning\n  if (this.elements.length == 0) {\n    return 0\n  }\n\n  var start = 0,\n      end = this.elements.length / 2,\n      sliceLength = end - start,\n      pivotPoint = Math.floor(sliceLength / 2),\n      pivotIndex = this.elements[pivotPoint * 2]\n\n  while (sliceLength > 1) {\n    if (pivotIndex < index) {\n      start = pivotPoint\n    }\n\n    if (pivotIndex > index) {\n      end = pivotPoint\n    }\n\n    if (pivotIndex == index) {\n      break\n    }\n\n    sliceLength = end - start\n    pivotPoint = start + Math.floor(sliceLength / 2)\n    pivotIndex = this.elements[pivotPoint * 2]\n  }\n\n  if (pivotIndex == index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex > index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex < index) {\n    return (pivotPoint + 1) * 2\n  }\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * Does not allow duplicates, will throw an error if there is already an entry\n * for this index.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this.upsert(insertIdx, val, function () {\n    throw \"duplicate index\"\n  })\n}\n\n/**\n * Inserts or updates an existing index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n * @param {function} fn - A function that is called for updates, the existing value and the\n * requested value are passed as arguments\n */\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n  this._magnitude = 0\n  var position = this.positionForIndex(insertIdx)\n\n  if (this.elements[position] == insertIdx) {\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\n  } else {\n    this.elements.splice(position, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the cosine similarity between this vector and another\n * vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / (this.magnitude() * otherVector.magnitude())\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2017 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      } else {\n        stack.push({\n          node: noEditNode,\n          editsRemaining: frame.editsRemaining,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var char = frame.str.charAt(1),\n          deletionNode\n\n      if (char in frame.node.edges) {\n        deletionNode = frame.node.edges[char]\n      } else {\n        deletionNode = new lunr.TokenSet\n        frame.node.edges[char] = deletionNode\n      }\n\n      if (frame.str.length <= 2) {\n        deletionNode.final = true\n      } else {\n        stack.push({\n          node: deletionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(2)\n        })\n      }\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.editsRemaining > 0 && frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.editsRemaining > 0 && frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      } else {\n        stack.push({\n          node: substitutionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // insertion\n    // can only do insertion if there are edits remaining\n    if (frame.editsRemaining > 0) {\n      if (\"*\" in frame.node.edges) {\n        var insertionNode = frame.node.edges[\"*\"]\n      } else {\n        var insertionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = insertionNode\n      }\n\n      if (frame.str.length == 0) {\n        insertionNode.final = true\n      } else {\n        stack.push({\n          node: insertionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str\n        })\n      }\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      } else {\n        stack.push({\n          node: transposeNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: charA + frame.str.slice(2)\n        })\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node,\n      wildcardFound = false\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * As soon as a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      wildcardFound = true\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n\n      // TODO: is this needed anymore?\n      if (wildcardFound) {\n        node.edges[\"*\"] = root\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.documentVectors - Document vectors keyed by document reference.\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.fieldVectors = attrs.fieldVectors\n  this.tokenSet = attrs.tokenSet\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n * of attempting to apply a boost of 2 to the search term \"foo\".\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingFields = Object.create(null),\n      queryVectors = Object.create(null),\n      termFieldCache = Object.create(null)\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term)\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term get the posting and termIndex, this is required for\n         * building the query vector.\n         */\n        var expandedTerm = expandedTerms[j],\n            posting = this.invertedIndex[expandedTerm],\n            termIndex = posting._index\n\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting),\n              termField = expandedTerm + \"/\" + field\n\n          /*\n           * To support field level boosts a query vector is created per\n           * field. This vector is populated using the termIndex found for\n           * the term and a unit value with the appropriate boost applied.\n           *\n           * If the query vector for this field does not exist yet it needs\n           * to be created.\n           */\n          if (queryVectors[field] === undefined) {\n            queryVectors[field] = new lunr.Vector\n          }\n\n          /*\n           * Using upsert because there could already be an entry in the vector\n           * for the term we are working with. In that case we just add the scores\n           * together.\n           */\n          queryVectors[field].upsert(termIndex, 1 * clause.boost, function (a, b) { return a + b })\n\n          /**\n           * If we've already seen this term, field combo then we've already collected\n           * the matching documents and metadata, no need to go through all that again\n           */\n          if (termFieldCache[termField]) {\n            continue\n          }\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\n                metadata = fieldPosting[matchingDocumentRef],\n                fieldMatch\n\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\n            } else {\n              fieldMatch.add(expandedTerm, field, metadata)\n            }\n\n          }\n\n          termFieldCache[termField] = true\n        }\n      }\n    }\n  }\n\n  var matchingFieldRefs = Object.keys(matchingFields),\n      results = [],\n      matches = Object.create(null)\n\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\n    /*\n     * Currently we have document fields that match the query, but we\n     * need to return documents. The matchData and scores are combined\n     * from multiple fields belonging to the same document.\n     *\n     * Scores are calculated by field, using the query vectors created\n     * above, and combined into a final document score using addition.\n     */\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n        docRef = fieldRef.docRef,\n        fieldVector = this.fieldVectors[fieldRef],\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n        docMatch\n\n    if ((docMatch = matches[docRef]) !== undefined) {\n      docMatch.score += score\n      docMatch.matchData.combine(matchingFields[fieldRef])\n    } else {\n      var match = {\n        ref: docRef,\n        score: score,\n        matchData: matchingFields[fieldRef]\n      }\n      matches[docRef] = match\n      results.push(match)\n    }\n  }\n\n  /*\n   * Sort the results objects by score, highest first.\n   */\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var fieldVectors = Object.keys(this.fieldVectors)\n    .map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    fields: this.fields,\n    fieldVectors: fieldVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      fieldVectors = {},\n      serializedVectors = serializedIndex.fieldVectors,\n      invertedIndex = {},\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    fieldVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.fields = serializedIndex.fields\n\n  attrs.fieldVectors = fieldVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = []\n  this.invertedIndex = Object.create(null)\n  this.fieldTermFrequencies = {}\n  this.fieldLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * @param {string} field - The name of a field to index in all documents.\n */\nlunr.Builder.prototype.field = function (field) {\n  this._fields.push(field)\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * @param {object} doc - The document to add to the index.\n */\nlunr.Builder.prototype.add = function (doc) {\n  var docRef = doc[this._ref]\n\n  this.documentCount += 1\n\n  for (var i = 0; i < this._fields.length; i++) {\n    var fieldName = this._fields[i],\n        field = doc[fieldName],\n        tokens = this.tokenizer(field),\n        terms = this.pipeline.run(tokens),\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\n        fieldTerms = Object.create(null)\n\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\n    this.fieldLengths[fieldRef] = 0\n\n    // store the length of this field for this document\n    this.fieldLengths[fieldRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (fieldTerms[term] == undefined) {\n        fieldTerms[term] = 0\n      }\n\n      fieldTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < this._fields.length; k++) {\n          posting[this._fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\n\n  var fieldRefs = Object.keys(this.fieldLengths),\n      numberOfFields = fieldRefs.length,\n      accumulator = {},\n      documentsWithField = {}\n\n  for (var i = 0; i < numberOfFields; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName\n\n    documentsWithField[field] || (documentsWithField[field] = 0)\n    documentsWithField[field] += 1\n\n    accumulator[field] || (accumulator[field] = 0)\n    accumulator[field] += this.fieldLengths[fieldRef]\n  }\n\n  for (var i = 0; i < this._fields.length; i++) {\n    var field = this._fields[i]\n    accumulator[field] = accumulator[field] / documentsWithField[field]\n  }\n\n  this.averageFieldLength = accumulator\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createFieldVectors = function () {\n  var fieldVectors = {},\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\n      fieldRefsLength = fieldRefs.length,\n      termIdfCache = Object.create(null)\n\n  for (var i = 0; i < fieldRefsLength; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName,\n        fieldLength = this.fieldLengths[fieldRef],\n        fieldVector = new lunr.Vector,\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf, score, scoreWithPrecision\n\n      if (termIdfCache[term] === undefined) {\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\n        termIdfCache[term] = idf\n      } else {\n        idf = termIdfCache[term]\n      }\n\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[field])) + tf)\n      scoreWithPrecision = Math.round(score * 1000) / 1000\n      // Converts 1.23456789 to 1.234.\n      // Reducing the precision so that the vectors take up less\n      // space when serialised. Doing it now so that they behave\n      // the same before and after serialisation. Also, this is\n      // the fastest approach to reducing a number's precision in\n      // JavaScript.\n\n      fieldVector.insert(termIndex, scoreWithPrecision)\n    }\n\n    fieldVectors[fieldRef] = fieldVector\n  }\n\n  this.fieldVectors = fieldVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageFieldLengths()\n  this.createFieldVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    fieldVectors: this.fieldVectors,\n    tokenSet: this.tokenSet,\n    fields: this._fields,\n    pipeline: this.searchPipeline\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n * @property {object} metadata - A cloned collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  var clonedMetadata = Object.create(null),\n      metadataKeys = Object.keys(metadata)\n\n  // Cloning the metadata to prevent the original\n  // being mutated during match data combination.\n  // Metadata is kept in an array within the inverted\n  // index so cloning the data can be done with\n  // Array#slice\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n    clonedMetadata[key] = metadata[key].slice()\n  }\n\n  this.metadata = Object.create(null)\n  this.metadata[term] = Object.create(null)\n  this.metadata[term][field] = clonedMetadata\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = Object.create(null)\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = Object.create(null)\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n\n/**\n * Add metadata for a term/field pair to this instance of match data.\n *\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n */\nlunr.MatchData.prototype.add = function (term, field, metadata) {\n  if (!(term in this.metadata)) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  if (!(field in this.metadata[term])) {\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  var metadataKeys = Object.keys(metadata)\n\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n\n    if (key in this.metadata[term][field]) {\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\n    } else {\n      this.metadata[term][field][key] = metadata[key]\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n *\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n * concatenation.\n *\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n *\n * @constant\n * @default\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with trailing wildcard</caption>\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n * @example <caption>query term with leading and trailing wildcard</caption>\n * query.term('foo', {\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n * })\n */\nlunr.Query.wildcard = new String (\"*\")\nlunr.Query.wildcard.NONE = 0\nlunr.Query.wildcard.LEADING = 1\nlunr.Query.wildcard.TRAILING = 2\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n * @property {number} [wildcard=0] - Whether the term should have wildcards appended or prepended.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @see lunr.Query~Clause\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  if (!('wildcard' in clause)) {\n    clause.wildcard = lunr.Query.wildcard.NONE\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\n    clause.term = \"*\" + clause.term\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\n    clause.term = \"\" + clause.term + \"*\"\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * @param {string} term - The term to add to the query.\n * @param {Object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n * @see lunr.Query#clause\n * @see lunr.Query~Clause\n * @example <caption>adding a single term to a query</caption>\n * query.term(\"foo\")\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n * query.term(\"foo\", {\n *   fields: [\"title\"],\n *   boost: 10,\n *   wildcard: lunr.Query.wildcard.TRAILING\n * })\n */\nlunr.Query.prototype.term = function (term, options) {\n  var clause = options || {}\n  clause.term = term\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n  this.escapeCharPositions = []\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.sliceString = function () {\n  var subSlices = [],\n      sliceStart = this.start,\n      sliceEnd = this.pos\n\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\n    sliceEnd = this.escapeCharPositions[i]\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\n    sliceStart = sliceEnd + 1\n  }\n\n  subSlices.push(this.str.slice(sliceStart, this.pos))\n  this.escapeCharPositions.length = 0\n\n  return subSlices.join('')\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.sliceString(),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.escapeCharacter = function () {\n  this.escapeCharPositions.push(this.pos - 1)\n  this.pos += 1\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos >= this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\n// This matches the separator used when tokenising fields\n// within a document. These should match otherwise it is\n// not possible to search for some tokens within a document.\n//\n// It is possible for the user to change the separator on the\n// tokenizer so it _might_ clash with any other of the special\n// characters already used within the search string, e.g. :.\n//\n// This means that it is possible to change the separator in\n// such a way that makes some words unsearchable using a search\n// string.\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    // Escape character is '\\'\n    if (char.charCodeAt(0) == 92) {\n      lexer.escapeCharacter()\n      continue\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    if (char.match(lunr.QueryLexer.termSeparator)) {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseFieldOrTerm\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseFieldOrTerm = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\n\n      if (lexeme.str.length >= 1) {\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\n      }\n\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n\n\n\t//This is the main plugin definition\n\t$.fn.ghostHunter \t= function( options ) {\n\n\t\t//Here we use jQuery's extend to set default values if they weren't set by the user\n\t\tvar opts \t\t= $.extend( {}, $.fn.ghostHunter.defaults, options );\n\t\tif( opts.results ) \n\t\t{\n\t\t\tpluginMethods.init( this , opts );\n\t\t\treturn pluginMethods;\n\t\t}\n\t};\n\t \n\t// If the Ghost instance is in a subpath of the site, set subpath\n    // as the path to the site with a leading slash and no trailing slash\n    // (i.e. \"/path/to/instance\").\n\t$.fn.ghostHunter.defaults = {\n\t\tresultsData\t\t\t: false,\n\t\tonPageLoad\t\t\t: true,\n\t\tonKeyUp\t\t\t\t: false,\n\t\tresult_template \t: \"<a href='{{link}}'><p><h2>{{title}}</h2><h4>{{prettyPubDate}}</h4></p></a>\",\n\t\tinfo_template\t\t: \"<p>Number of posts found: {{amount}}</p>\",\n\t\tdisplaySearchInfo\t: true,\n\t\tzeroResultsInfo\t\t: true,\n\t\tbefore\t\t\t\t: false,\n\t\tonComplete\t\t\t: false,\n\t\tincludepages\t\t: false,\n\t\tfilterfields\t\t: false,\n        subpath\t\t\t\t: \"\",\n        item_preprocessor\t: false,\n        indexing_start\t\t: false,\n        indexing_end\t\t: false\n\t};\n\tvar prettyDate = function(date) {\n\t\tvar d = new Date(date);\n\t\tvar monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\t\t\treturn d.getDate() + ' ' + monthNames[d.getMonth()] + ' ' + d.getFullYear();\n\t};\n\n    var getSubpathKey = function(str) {\n        return str.replace(/^\\//, \"\").replace(/\\//g, \"-\")\n    }\n    \n    var grabAndIndex = function(){\n        if (this.indexing_start) {\n            this.indexing_start();\n        }\n        this.blogData = {};\n        this.latestPost = 0;\n\t\tvar params = {\n            limit: \"all\",\n            include: \"tags\",\n            formats: [\"plaintext\"]\n        };\n\t\tif  ( this.includepages ){\n\t\t\tparams.filter=\"(page:true,page:false)\";\n\t\t}\n        var me = this;\n        $.get(ghost.url.api('posts',params)).done(function(data){\n            var idxSrc = data.posts;\n            console.log(\"ghostHunter: indexing all posts\")\n\t\t\tme.index = lunr(function () {\n\t\t\t\tthis.field('title', {boost: 10})\n                this.field('description')\n\t\t\t\tthis.field('plaintext', {boost: 5})\n\t\t\t\tthis.field('pubDate')\n\t\t\t\tthis.field('tag')\n\t\t\t\tthis.ref('id')\n                idxSrc.forEach(function (arrayItem) {\n                    // Track the latest value of updated_at,  to stash in localStorage\n                    var itemDate = new Date(arrayItem.updated_at).getTime();\n                    var recordedDate = new Date(me.latestPost).getTime();\n                    if (itemDate > recordedDate) {\n                        me.latestPost = arrayItem.updated_at;\n                    }\n                    var tag_arr = arrayItem.tags.map(function(v) {\n\t\t\t\t        return v.name; // `tag` object has an `name` property which is the value of tag. If you also want other info, check API and get that property\n\t\t\t\t    })\n\t\t\t\t    if(arrayItem.meta_description == null) { arrayItem.meta_description = '' };\n\t\t\t\t    var category = tag_arr.join(\", \");\n\t\t\t\t    if (category.length < 1){\n\t\t\t\t        category = \"undefined\";\n\t\t\t\t    }\n                    var parsedData \t= {\n\t\t\t\t\t    id \t\t\t: String(arrayItem.id),\n\t\t\t\t\t    title \t\t: String(arrayItem.title),\n\t\t\t\t\t    description\t: String(arrayItem.meta_description),\n\t\t\t\t\t    plaintext \t: String(arrayItem.plaintext),\n\t\t\t\t\t    pubDate \t: String(arrayItem.published_at),\n\t\t\t\t\t    tag \t\t: category\n\t\t\t\t    }\n\t\t\t\t    this.add(parsedData)\n                    var localUrl = me.subpath + arrayItem.url\n\t\t\t\t    me.blogData[arrayItem.id] = {\n                        title: arrayItem.title,\n                        description: arrayItem.meta_description,\n                        pubDate: prettyDate(parsedData.pubDate),\n                        link: localUrl,\n                        tags: tag_arr\n                    };\n                    // If there is a metadata \"pre\"-processor for the item, run it here.\n                    if (me.item_preprocessor) {\n                        Object.assign(me.blogData[arrayItem.id], me.item_preprocessor(arrayItem));\n                    }\n                }, this);\n                if (me.indexing_end) {\n                    me.indexing_end();\n                }\n            });\n            try {\n                var subpathKey = getSubpathKey(me.subpath);\n                localStorage.setItem((\"ghost_\" + subpathKey + \"_lunrIndex\"), JSON.stringify(me.index));\n                localStorage.setItem((\"ghost_\" + subpathKey + \"_blogData\"), JSON.stringify(me.blogData));\n                localStorage.setItem((\"ghost_\" + subpathKey + \"_latestPost\"), me.latestPost);\n            } catch (e) {\n                console.warn(\"ghostHunter: save to localStorage failed: \" + e);\n            }\n            me.isInit = true;\n        });\n    }\n\n\tvar pluginMethods\t= {\n\n\t\tisInit\t\t\t: false,\n\n\t\tinit\t\t\t: function( target , opts ){\n\t\t\tvar that = this;\n            Object.assign(this, opts);\n            \n\t\t\tif ( opts.onPageLoad ) {\n\t\t\t\tfunction miam () {\n\t\t\t\t\tthat.loadAPI();\n\t\t\t\t}\n\t\t\t\twindow.setTimeout(miam, 1);\n\t\t\t} else {\n\t\t\t\ttarget.focus(function(){\n\t\t\t\t\tthat.loadAPI();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ttarget.closest(\"form\").submit(function(e){\n\t\t\t\te.preventDefault();\n\t\t\t\tthat.find(target.val());\n\t\t\t});\n\n\t\t\tif( opts.onKeyUp ) {\n\t\t\t\ttarget.keyup(function() {\n\t\t\t\t\tthat.find(target.val());\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t},\n\n\t\tloadAPI\t\t\t: function(){\n            \n\t\t\tif(!this.isInit) {\n                // If isInit is falsy, check for data in localStore,\n                // parse into memory, and declare isInit to be true.\n                try {\n                    var subpathKey = getSubpathKey(this.subpath);\n                    this.index = localStorage.getItem((\"ghost_\" + subpathKey + \"_lunrIndex\"));\n                    this.blogData = localStorage.getItem((\"ghost_\" + subpathKey + \"_blogData\"));\n                    this.latestPost = localStorage.getItem((\"ghost_\" + subpathKey + \"_latestPost\"));\n                    if (this.latestPost && this.index && this.blogData) {\n                        this.latestPost = this.latestPost;\n                        this.index = lunr.Index.load(JSON.parse(this.index));\n                        this.blogData = JSON.parse(this.blogData);\n                        this.isInit = true;\n                    }\n                } catch (e){\n                    console.warn(\"ghostHunter: retrieve from localStorage failed: \" + e);\n                }\n            }\n            if (this.isInit) {\n                // Check if there are new or edited posts\n                var params = {\n                    limit: \"all\",\n                    filter: \"updated_at:>\\'\" + this.latestPost + \"\\'\",\n                    fields: \"id\"\n                };\n                var me = this;\n                $.get(ghost.url.api('posts', params)).done(function(data){\n                    if (data.posts.length > 0) {\n                        grabAndIndex.call(me);\n                    }\n                });\n            } else {\n                // isInit is still false.\n                grabAndIndex.call(this)\n            }\n\t\t},\n\n\t\tfind \t\t \t: function(value){\n\t\t\tvar searchResult \t= this.index.search(value);\n\t\t\tvar results \t\t= $(this.results);\n\t\t\tvar resultsData \t= [];\n\t\t\tresults.empty();\n\n\t\t\tif(this.before) {\n\t\t\t\tthis.before();\n\t\t\t};\n\n\t\t\tif(this.zeroResultsInfo || searchResult.length > 0)\n\t\t\t{\n\t\t\t\tif(this.displaySearchInfo) results.append(this.format(this.info_template,{\"amount\":searchResult.length}));\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < searchResult.length; i++)\n\t\t\t{\n\t\t\t\tvar lunrref\t\t= searchResult[i].ref;\n\t\t\t\tvar postData  \t= this.blogData[lunrref];\n                if (postData) {\n\t\t\t\t    results.append(this.format(this.result_template,postData));\n\t\t\t\t    resultsData.push(postData);\n                } else {\n                    console.warn(\"ghostHunter: index/data mismatch. Ouch.\");\n                }\n\t\t\t}\n\n\t\t\tif(this.onComplete) {\n\t\t\t\tthis.onComplete(resultsData);\n\t\t\t};\n\t\t},\n\n\t\tclear \t\t\t: function(){\n\t\t\t$(this.results).empty();\n\t\t\tthis.target.val(\"\");\n\t\t},\n\n\t\tformat \t\t\t: function (t, d) {\n\t\t\treturn t.replace(/{{([^{}]*)}}/g, function (a, b) {\n\t\t\t\tvar r = d[b];\n\t\t\t\treturn typeof r === 'string' || typeof r === 'number' ? r : a;\n\t\t\t});\n\t\t}\n\t}\n\n})( jQuery );\n"]}